// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  seed     = "ts-node -r tsconfig-paths/register prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  passwordHash  String
  firstName     String
  lastName      String
  isActive      Boolean   @default(true)
  otpEnabled    Boolean   @default(false)
  otpSecret     String?
  lastLoginAt   DateTime?
  acceptTerms         Boolean  @default(false)
  receiveNotifications Boolean @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  roles         UserRole[]
  otps          Otp[]
  refreshTokens RefreshToken[]
  passwordResets PasswordReset[]
  files         File[]
  profile       Profile?
  preferences   Preferences?
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  users       UserRole[]
  permissions RolePermission[]
}

model Permission {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  resource    String
  action      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  roles       RolePermission[]
}

model UserRole {
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId    String
  createdAt DateTime @default(now())

  @@id([userId, roleId])
}

model RolePermission {
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  roleId       String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String
  createdAt    DateTime   @default(now())

  @@id([roleId, permissionId])
}

model Otp {
  id         String    @id @default(uuid())
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  secret     String
  expiresAt  DateTime
  verifiedAt DateTime?
  createdAt  DateTime  @default(now())
}

model RefreshToken {
  id        String    @id @default(uuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  token     String    @unique
  expiresAt DateTime
  revokedAt DateTime?
  createdAt DateTime  @default(now())
}

model EmailVerification {
  id         String    @id @default(uuid())
  email      String    
  code       String
  expiresAt  DateTime
  verifiedAt DateTime?
  createdAt  DateTime  @default(now())
  
  @@index([email])
}

model PasswordReset {
  id        String    @id @default(uuid())
  userId    String
  email     String    
  token     String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([email])
  @@index([token])
}

model File {
  id          String    @id @default(uuid())
  filename    String
  originalName String
  path        String
  mimeType    String
  size        Int
  bucket      String
  userId      String?
  isPublic    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
}

model Profile {
  id                 String            @id @default(uuid())
  userId             String            @unique
  bio                String?
  dateOfBirth        DateTime?
  gender             Gender?
  height             Int?              // in centimeters
  weight             Int?              // in kilograms
  location           String?
  occupation         String?
  education          String?
  relationshipStatus RelationshipStatus?
  interests          String[]
  photos             String[]          // Array of photo URLs/IDs
  isVisible          Boolean           @default(true)
  isComplete         Boolean           @default(false)
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([location])
  @@index([isVisible])
  @@index([isComplete])
}

model Preferences {
  id                        String        @id @default(uuid())
  userId                    String        @unique
  preferredGenders          Gender[]
  minAge                    Int           @default(18)
  maxAge                    Int           @default(99)
  maxDistance               Int           @default(50)
  distanceUnit              DistanceUnit  @default(KILOMETERS)
  preferredInterests        String[]
  dealBreakers              String[]
  showOnlyVerifiedProfiles  Boolean       @default(false)
  showOnlyWithPhotos        Boolean       @default(true)
  allowMessagesFromMatches  Boolean       @default(true)
  allowMessagesFromEveryone Boolean       @default(false)
  showOnlineStatus          Boolean       @default(true)
  showLastSeen              Boolean       @default(true)
  pushNotifications         Boolean       @default(true)
  emailNotifications        Boolean       @default(true)
  matchNotifications        Boolean       @default(true)
  messageNotifications      Boolean       @default(true)
  likeNotifications         Boolean       @default(true)
  createdAt                 DateTime      @default(now())
  updatedAt                 DateTime      @updatedAt

  user                      User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Gender {
  MALE
  FEMALE
  NON_BINARY
  PREFER_NOT_TO_SAY
}

enum RelationshipStatus {
  SINGLE
  IN_RELATIONSHIP
  MARRIED
  DIVORCED
  WIDOWED
  COMPLICATED
}

enum DistanceUnit {
  KILOMETERS
  MILES
}
